import ori
import ast
import re
import nltk
from nltk import word_tokenize
def identifyOpinionWords(iR, iA, o):       
	inRev = open(iR,"r").read()
	inAsp = open(iA,"r").read()
	outAsp=open (o,"w")
	inputReviewsTuples=ast.literal_eval(inRev)
	inputAspectTuples=ast.literal_eval(inAsp)
	outputAspectOpinionTuples={}
	orientationCache={}
	negativeWordSet = {"don't", "never", "nothing", "nowhere", "noone", "none", "not", "hasn't", "hadn't", "can't", "couldn't", "shouldn't", "won't", "wouldn't", "don't", "doesn't", "didn't", "isn't", "aren't", "ain't"}
	print("Aspect\t\t\t\tPositive\tNegative")
	for aspect,no in inputAspectTuples:
		aspectTokens= word_tokenize(aspect)
		count=0
		for key,value in inputReviewsTuples.items():
			condition=True
			isNegativeSen=False
			for subWord in aspectTokens:
				if(subWord in str(value).upper()):
					condition = condition and True
				else:
					condition = False
					break
			if(condition):
				for negWord in negativeWordSet:
					if(not isNegativeSen):
#once senetence is negative no need to check this condition again and again
						if negWord.upper() in str(value).upper():
							isNegativeSen=isNegativeSen or True
				outputAspectOpinionTuples.setdefault(aspect,[0,0,0])
				for word,tag in value:
					if(tag=='JJ' or tag=='JJR' or tag=='JJS'or tag== 'RB' or tag== 'RBR'or tag== 'RBS'):
						count+=1
						if(word not in orientationCache):
							orien=ori.orientation(word)
							orientationCache[word]=orien
						else:
							orien=orientationCache[word]
						if(isNegativeSen and orien is not None):
							orien= not orien
						if(orien==True):
							outputAspectOpinionTuples[aspect][0]+=1
						elif(orien==False):
							outputAspectOpinionTuples[aspect][1]+=1
						elif(orien is None):
							outputAspectOpinionTuples[aspect][2]+=1
		if(count>0):
			outputAspectOpinionTuples[aspect][0]=round((float(outputAspectOpinionTuples[aspect][0])/float(count))*100,2)
			outputAspectOpinionTuples[aspect][1]=round((float(outputAspectOpinionTuples[aspect][1])/float(count))*100,2)
			outputAspectOpinionTuples[aspect][2]=round((float(outputAspectOpinionTuples[aspect][2])/float(count))*100,2)
			T="\t\t\t\t"
			if len(str(aspect))>7 and len(str(aspect))<=15:
				T="\t\t\t"
			elif len(str(aspect))>15:
				T="\t\t"
			print(str(aspect)+T+str(outputAspectOpinionTuples[aspect][0])+"\t\t"+str(outputAspectOpinionTuples[aspect][1]))
	outAsp.write(str(outputAspectOpinionTuples))
	outAsp.close();
